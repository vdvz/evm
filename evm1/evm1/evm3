	.file	"evm3.cpp"
	.text
	.globl	main
	.type	main, @function
main:
.LFB2://Инициализация стека, задание начальных значений
	.cfi_startproc	//	quad = 64 bit
	pushq	%rbp //Помещает значение регистра rbp(база стекового фрейма)  в стек
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp //Записывает значение регистра rsp в регистр rbp (указатель вершины стека) 
	.cfi_def_cfa_register 6
	subq	$32, %rsp //Сдвигает регистр rsp на 32 бита 
	movabsq	$400000000000, %rax //Запись полного значения константного значения N заданного в программе 
	movq	%rax, -8(%rbp) //Помещает значение из регистра по адресу rax в rbp со сдвигом 8 //N 
	movq	$0, -16(%rbp) //Очищает память по адресу rbp со сдвигом 16 размером с $0 //i
	movl	$0, -20(%rbp) //l - long (32 bit) Помещает 0 по адресу rbp со сдвигом 20 //pi
.L7:
	movl	-20(%rbp), %eax //Помещает значение в регистре rbp со сдвигом -20 в регистр eax 
	cltq
	cmpq	-8(%rbp), %rax //Сравнивает значение по адресу rbp со сдвигом 8 с значение в регистре rax 
	jnb	.L2 			   //Если нет переполнения ( CF=0 ), то переход к L2
	pxor	%xmm0, %xmm0   //Обнуление векторного регистра xmm0
	cvtsi2sd	-20(%rbp), %xmm0 //Преобразование типов. Записывает значение из регистра rbp со сдвигом 20 в регистр xmm0 //Загружает пи в вектор xmm0 
	movapd	%xmm0, %xmm1	  	 //Перемещение упакованных выровненных данных в регистр xmm1
	//rip указывает на следующую инструкцию для выполнения
	movsd	.LC0(%rip), %xmm0 	 //Перемещение одного участка памяти в другой. Копирование происходит побайтово, словами или, в данном случае, двойным словом.
	call	pow 			   	 //Вызов подпрограммы из сишной библиотеки math.h 
	movapd	%xmm0, %xmm1 	  	 //Перемещение упакованных выровненных Double
	movsd	.LC1(%rip), %xmm0 	 //
	mulsd	%xmm1, %xmm0 		//Скалярное умножение Double
	movl	-20(%rbp), %eax		//Перемещение значения из регистра rbp со смещением 20 в eax
	addl	%eax, %eax 			//Удвоение значения в регистре eax  //2*i
	addl	$1, %eax 			//Прибавление 1 к значению в регистре eax // 2*i+1
	pxor	%xmm1, %xmm1 		//Обнуление векторного регистра xmm1
	cvtsi2sd	%eax, %xmm1 	//Преобразование скалярного DWord в Double.Записывает значение eax в xmm1 
	divsd	%xmm1, %xmm0 		//Скалярное деление double
	movapd	%xmm0, %xmm1 		//Перемещение упакованных выровненных данных double
	movq	-16(%rbp), %rax 	//Записывает значение из регистра rbp со смещением 16 в регистр rax
	testq	%rax, %rax 			//Логическое  И, результат не записывает вместо получателя 
	js	.L3 					//Если флаг знака равен 1 то переход на метку .L3
	pxor	%xmm0, %xmm0 		//Упакованное логическое исключающее ИЛИ
	cvtsi2sdq	%rax, %xmm0 	//Преобразование скалярного DWord в Double
	jmp	.L4 					//Перепрыгивает на метку .L4
.L3:
	movq	%rax, %rdx		//Перемещение значения из rax в rdx
	shrq	%rdx 			//Логический сдвиг вправо(Деление на 2)
	andl	$1, %eax 		//Побитовое логическое И (eax%2=0 -> eax=0; otherwise -> eax=1)
	orq	    %rax, %rdx 		//Побитовое логическое ИЛИ
	pxor	%xmm0, %xmm0    //Обнуление xmm0
	cvtsi2sdq	%rdx, %xmm0 //Преобразование значения в xmm0 в double
	addsd	%xmm0, %xmm0 	//Скалярное сложение double
.L4:
	addsd	%xmm1, %xmm0 	  //Скалярное сложение double
	ucomisd	.LC2(%rip), %xmm0 //Неупорядоченное скалярное сравнение Double с установкой флагов в EFLAGS
	jnb	.L5 				  //Переход если не было переполнения  
	cvttsd2siq	%xmm0, %rax   //Преобразование значения double в xmm0 
	movq	%rax, -16(%rbp)   //Перемещение значения rax в регистр rbp со сдвигом 16
	jmp	.L6					  //Безусловный переход на метку .L6
.L5:
	movsd	.LC2(%rip), %xmm1
	subsd	%xmm1, %xmm0
	cvttsd2siq	%xmm0, %rax
	movq	%rax, -16(%rbp)
	movabsq	$-9223372036854775808, %rax
	xorq	%rax, -16(%rbp)
.L6:
	movq	-16(%rbp), %rax // Записывает значение из регистра rbp со смещением -16 в регистр rax  
	movq	%rax, -16(%rbp) // ?????
	addl	$1, -20(%rbp)   //Увеличивает значение в регистре rbp со смещение -20 на единицу
	jmp	.L7 				// переход к метке .L7 
.L2:
	movl	$0, %eax //
	leave
	.cfi_def_cfa 7, 8
	ret //Возврат из подпрограммы
	.cfi_endproc
.LFE2:
	.size	main, .-main
	.section	.rodata
	.align 8
.LC0:
	.long	0			//
	.long	-1074790400 //
	.align 8			//Выравнивает данные
.LC1:
	.long	0			//
	.long	1074790400  //
	.align 8 			//Выравнивает данные
.LC2:
	.long	0
	.long	1138753536
	.ident	"GCC: (Ubuntu 5.5.0-12ubuntu1~16.04) 5.5.0 20171010"
	.section	.note.GNU-stack,"",@progbits